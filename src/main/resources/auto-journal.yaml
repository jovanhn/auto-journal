openapi: 3.0.3
info:
  title: Swagger AutoJournal - OpenAPI 3.0
  description: This is a sample AutoJournal Server based on the OpenAPI 3.0 specification.  You can find out more about
  version: 1.0.0
servers:
  - url: https://localhost:8080/
tags:
  - name: users
    description: Operations for managing users data
  - name: vehicles
    description: Operations for managing vehicles data
paths:
  /users:
    post:
      tags:
        - users
      summary: Create user
      description: This action is execute when user is creating its account.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserResponse'
    get:
      tags:
        - users
      summary: Get user
      description: This action is execute when user is creating its account.
      operationId: getUserByQueryParam
      parameters:
        - name: username
          in: query
          description: 'The user that needs to be fetched by userId. Use 1 for testing. '
          required: false
          schema:
            type: string
        - name: email
          in: query
          description: 'The user that needs to be fetched by email. Use 1 for testing. '
          required: false
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
  /users/{userId}:
    get:
      tags:
        - users
      summary: Get user
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: 'The user that needs to be fetched by userId. Use 1 for testing. '
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
    put:
      tags:
        - users
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: Id of a user that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - users
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /vehicles:
    post:
      tags:
        - vehicles
      summary: Create vehicle
      description: This action is execute when user creates new vehicle.
      operationId: createVehicle
      requestBody:
        description: Created vehicle object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleRequest'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleResponse'
  /vehicles/{vehicleId}:
    get:
      tags:
        - vehicles
      summary: Get vehicle
      description: This action is execute when user gets particular vehicle.
      operationId: getVehicle
      parameters:
        - name: vehicleId
          in: path
          description: 'The vehicle that needs to be fetched. Use 1 for testing. '
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleResponse'

components:
  schemas:
    UserRequest:
      type: object
      properties:
        name:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
    UserResponse:
      type: object
      properties:
        id:
          type: string
          example: 10j1sd-321321-dad11d2-d21x122
        name:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
    VehicleRequest:
      type: object
      properties:
        type:
          type: string
          example: moto-bike
        brand:
          type: string
          example: BMW
        model:
          type: string
          example: Africa
        year:
          type: integer
          example: 1994
        serial:
          type: string
          example: W021-D892-X994
        ownerId:
          type: string
          example: someUserId
    VehicleResponse:
      type: object
      properties:
        id:
          type: string
          example: jkh3-312ml-311lj-833f
        type:
          type: string
          example: moto-bike
        brand:
          type: string
          example: BMW
        model:
          type: string
          example: Africa
        year:
          type: integer
          example: 1994
        serial:
          type: string
          example: W021-D892-X994
        ownerId:
          type: string
          example: someUserId


